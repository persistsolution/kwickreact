name: Deploy React App with Docker

on:
  push:
    branches:
      - main
      - dev
      - test
      - stag

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 20

    - name: Install Dependencies and Build App
      run: |
        npm install
        npm run build

    - name: Build Docker Image
      env:
        BRANCH: ${{ github.ref_name }}
      run: |
        docker build -t my-react-app:${{ github.ref_name }} .

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Push Docker Image
      env:
        BRANCH: ${{ github.ref_name }}
      run: |
        docker tag my-react-app:${{ github.ref_name }} ${{ secrets.DOCKER_USERNAME }}/my-react-app:${{ github.ref_name }}
        docker push ${{ secrets.DOCKER_USERNAME }}/my-react-app:${{ github.ref_name }}

    - name: Deploy Docker Container to EC2
      env:
        BRANCH: ${{ github.ref_name }}
        EC2_USER: ubuntu
        EC2_HOST: ${{ secrets.EC2_HOST }}
        PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
      run: |
        echo "$PRIVATE_KEY" > private_key.pem
        chmod 600 private_key.pem

        mkdir -p ~/.ssh
        ssh-keyscan -H $EC2_HOST >> ~/.ssh/known_hosts

        ssh -i private_key.pem $EC2_USER@$EC2_HOST << 'EOF'
          if ! command -v docker &> /dev/null; then
            echo "Installing Docker..."
            sudo apt-get update
            sudo apt-get install -y docker.io
            sudo systemctl start docker
            sudo systemctl enable docker
          fi

          BRANCH=${BRANCH:-"main"}
          case "$BRANCH" in
            main) PORT=5173 ;;
            dev) PORT=5174 ;;
            test) PORT=5175 ;;
            stag) PORT=5176 ;;
          esac

          echo "Checking if port $PORT is in use..."
          if lsof -i:$PORT | grep LISTEN; then
            echo "Stopping process using port $PORT..."
            sudo fuser -k $PORT/tcp || true
            sleep 2  # Wait to ensure the port is released
          fi

          echo "Stopping any existing container on this branch..."
          sudo docker stop my-react-app-$BRANCH || true
          sudo docker rm my-react-app-$BRANCH || true

          echo "Starting a new container..."
          for i in {1..3}; do
            sudo docker run -d --name my-react-app-$BRANCH -p $PORT:$PORT ${{ secrets.DOCKER_USERNAME }}/my-react-app:$BRANCH && break
            echo "Retrying to start the container..."
            sleep 5
          done
        EOF

        rm private_key.pem
